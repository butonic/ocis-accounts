syntax = "proto3";

option go_package = "pkg/proto/v0;proto";

package settings;

import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

// Follow recommended Methods for rpc APIs https://cloud.google.com/apis/design/resources?hl=de#methods
// https://cloud.google.com/apis/design/standard_methods?hl=de#list
// https://cloud.google.com/apis/design/naming_convention?hl=de
service AccountsService {
    // Lists accounts
    rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
        // List method maps to HTTP GET
        option (google.api.http) = {
            get: "/v0/accounts"
        };
    }
    // Gets an account
    rpc GetAccount(GetAccountRequest) returns (Account) {
        option (google.api.http) = {
            get: "/v0/accounts/{account_id=*}"
            body: "*"
        };
    }
    // Creates an account
    rpc CreateAccount(CreateAccountRequest) returns (Account) {
        // Create maps to HTTP POST. URL path as the collection name.
        // HTTP request body contains the resource
        option (google.api.http) = {
            post: "/v0/accounts"
            body: "account"
        };
    }
    // Updates an account
    rpc UpdateAccount(UpdateAccountRequest) returns (Account) {
        // Update maps to HTTP PATCH. Resource name is mapped to a URL path.
        // Resource is contained in the HTTP request body
        option (google.api.http) = {
            patch: "/v0/accounts/{account.account_id=*}"
            body: "account"
        };
    };
    // Deletes an account
    rpc DeleteAccount(DeleteAccountRequest) returns (google.protobuf.Empty) {
        // Delete maps to HTTP DELETE. Resource name maps to the URL path.
        // There is no request body
        option (google.api.http) = {
            delete: "/v0/accounts/{account_id=*}"
        };
    }

    // Lists groups
    rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse) {
        // List method maps to HTTP GET
        option (google.api.http) = {
            get: "/v0/groups"
        };
    }
    // Gets an groups
    rpc GetGroup(GetGroupRequest) returns (Group) {
        option (google.api.http) = {
            get: "/v0/groups/{group_id=*}"
            body: "*"
        };
    }
    // Creates a group
    rpc CreateGroup(CreateGroupRequest) returns (Group) {
        // Create maps to HTTP POST. URL path as the collection name.
        // HTTP request body contains the resource
        option (google.api.http) = {
            post: "/v0/groups"
            body: "group"
        };
    }
    // Updates a group
    rpc UpdateGroup(UpdateGroupRequest) returns (Group) {
        // Update maps to HTTP PATCH. Resource name is mapped to a URL path.
        // Resource is contained in the HTTP request body
        option (google.api.http) = {
            patch: "/v0/groups/{group.group_id=*}"
            body: "group"
        };
    };
    // Deletes a group
    rpc DeleteGroup(DeleteGroupRequest) returns (google.protobuf.Empty) {
        // Delete maps to HTTP DELETE. Resource name maps to the URL path.
        // There is no request body
        option (google.api.http) = {
            delete: "/v0/groups/{group_id=*}"
        };
    }
}

message ListAccountsRequest {
    // Optional. The maximum number of accounts to return in the response
    int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];

    // Optional. A pagination token returned from a previous call to `Get`
    // that indicates from where search should continue
    string page_token = 2 [(google.api.field_behavior) = OPTIONAL];

    // Optional. Search criteria used to select the accounts to return.
    // If no search criteria is specified then all accounts will be
    // returned
    //
    // TODO update query language
    // Query expressions can be used to restrict results based upon
    // the account properties where the operators `=`, `NOT`, `AND` and `OR`
    // can be used along with the suffix wildcard symbol `*`.
    //
    // The string properties in a query expression should use escaped quotes
    // for values that include whitespace to prevent unexpected behavior.
    //
    // Some example queries are:
    //
    // * Query `display_name=Th*` returns accounts whose display_name
    // starts with "Th"
    // * Query `email=foo@example.com` returns accounts with
    // `email` set to `foo@example.com`
    // * Query `display_name=\\"Test String\\"` returns accounts with
    // display names that include both "Test" and "String"
    string query = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ListAccountsResponse {
    // The field name should match the noun "accounts" in the method name.  There
    // will be a maximum number of items returned based on the page_size field
    // in the request
    repeated Account accounts = 1;

    // Token to retrieve the next page of results, or empty if there are no
    // more results in the list
    string next_page_token = 2;
}

message GetAccountRequest {
    string account_id = 1;
}

message CreateAccountRequest {
    // The account id to use for this account
    string account_id = 1;

    // The account resource to create
    Account account = 2;
}

message UpdateAccountRequest {
    // The account resource which replaces the resource on the server
    Account account = 1;

    // The update mask applies to the resource. For the `FieldMask` definition,
    // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
    google.protobuf.FieldMask update_mask = 2;
  }

message DeleteAccountRequest {
    string account_id = 1;
}

message Account {
    // the non reassignable and stable account_id of an account
    string account_id = 1;

    // The identities that are mapped to this account
    repeated Identities identities = 2; // keep track of every identity of a given user

    string username = 3;
    string display_name = 4;
    string mail = 5;
    // TODO avatar needed? because the standard claims contain it or our own avatar service will use the accountid or email to look up the avatar

    repeated Group groups = 6;
}

message Identities {
    string sign_in_type = 1;
    string issuer = 2;
    string issuer_assigned_id = 3;
}

message ListGroupsRequest {
    // Optional. The maximum number of groups to return in the response
    int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];

    // Optional. A pagination token returned from a previous call to `Get`
    // that indicates from where search should continue
    string page_token = 2 [(google.api.field_behavior) = OPTIONAL];

    // Optional. Search criteria used to select the groups to return.
    // If no search criteria is specified then all groups will be
    // returned
    //
    // TODO update query language
    // Query expressions can be used to restrict results based upon
    // the account properties where the operators `=`, `NOT`, `AND` and `OR`
    // can be used along with the suffix wildcard symbol `*`.
    //
    // The string properties in a query expression should use escaped quotes
    // for values that include whitespace to prevent unexpected behavior.
    //
    // Some example queries are:
    //
    // * Query `display_name=Th*` returns accounts whose display_name
    // starts with "Th"
    // * Query `display_name=\\"Test String\\"` returns groups with
    // display names that include both "Test" and "String"
    string query = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ListGroupsResponse {
    // The field name should match the noun "group" in the method name.  There
    // will be a maximum number of items returned based on the page_size field
    // in the request
    repeated Group groups = 1;

    // Token to retrieve the next page of results, or empty if there are no
    // more results in the list
    string next_page_token = 2;
}

message GetGroupRequest {
    string group_id = 1;
}

message CreateGroupRequest {
    // The group id to use for this group
    string group_id = 1;

    // The account resource to create
    Group group = 2;
}

message UpdateGroupRequest {
    // The group resource which replaces the resource on the server
    Group group = 1;

    // The update mask applies to the resource. For the `FieldMask` definition,
    // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
    google.protobuf.FieldMask update_mask = 2;
  }

message DeleteGroupRequest {
    string group_id = 1;
}

message Group {
    // the non reassignable and stable group_id of a group
    string group_id = 1;

    string groupname = 2;

    repeated Account accounts = 3;
}