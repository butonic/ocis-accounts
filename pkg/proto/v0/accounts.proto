syntax = "proto3";

option go_package = "pkg/proto/v0;proto";

package settings;

import "google/api/field_behavior.proto";

service AccountsService {
    rpc Set(Record) returns (Record);
    rpc Get(GetRequest) returns (Record);
    rpc Search(Query) returns (Records);
}

message Record {
    string key = 1;
    Payload payload = 2;
}

message Payload {
    Account account = 1;
}

message Account {
    StandardClaims standard_claims = 1;
    repeated IdHistory identities = 2; // keep track of every identity of a given user
    string Issuer = 3;
    string Password = 4;
}

// OIDC standard claims https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
message StandardClaims {
    string sub = 1;
    string name = 2;
    string given_name = 3;
    string family_name = 4;
    string middle_name = 5;
    string nickname = 6;
    string preferred_username = 7;
    string profile = 8;
    string picture = 9;
    string website = 10;
    string email = 11;
    bool email_verified = 12;
    string gender = 13;
    string birthdate = 14;
    string zoneinfo = 15;
    string locale = 16;
    string phone_number = 17;
    bool phone_number_verified = 18;
    int32 updated_at = 19;
    Address address = 20;
}

message Address {
    string formatted = 1;
    string street_address = 2;
    string locality = 3;
    string region = 4;
    string postal_code = 5;
    string country = 6;
}

message IdHistory {
    string sub = 1;
    string iss = 2;
}

message Phoenix {
    string theme = 1;
}

// Used to fetch exactly one user. The conditions are optional. If set, all have to be true.
message GetRequest {
    // Used to look up user by the oidc sub and iss
    IdHistory identity = 1;

    // Used to look up the user by our internal uuid
    string uuid = 2;

    // Used to authenticate users using basic auth
    string username = 3;
    string password = 4;

    // Used as a fallback mechanism in case sub or iss changed for an existing user
    string email = 5;
}

message Query {
    // Optional. The maximum number of accounts to return in the response.
    int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];

    // Optional. A pagination token returned from a previous call to `Get`
    // that indicates from where search should continue.
    string page_token = 2 [(google.api.field_behavior) = OPTIONAL];

    // Search criteria used to select the Accounts to return.
    // If no search criteria is specified then all accounts will be
    // returned.
    //
    // Query expressions can be used to restrict results based upon the standard claims,
    // iss, and uuid where the operators `=`, `NOT`, `AND` and `OR`
    // can be used along with the suffix wildcard symbol `*`.
    //
    // The *_name claims in a query expression should use escaped quotes
    // for values that include whitespace to prevent unexpected behavior.
    //
    // Some example queries are:
    //
    // * Query `name=Th*` returns accounts whose name claim
    // starts with "Th".
    // * Query `email=foo@example.com` returns accounts with
    // `email` set to `foo@example.com`.
    // * Query `address/country=de` returns accounts that have
    // an address in Germany
    // * Query `name=\\"Test String\\"` returns accounts with
    // display names that include both "Test" and "String".
    string query = 3;
}

message Records {
    // A possibly paginated accounts search result for
    // the specified query.
    repeated Record records = 1;

    // A pagination token returned from a previous call to `Search`
    // that indicates from where searching should continue.
    string next_page_token = 2;
}
